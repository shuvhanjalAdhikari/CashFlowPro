@using System.Text.Json;
@page "/Debt"

<style>
    /* Table Styling */
    body {
        font-family: 'Arial', sans-serif;
        background-color: #121212; /* Dark background */
        color: #E0E0E0; /* Light text for readability */
        margin: 0;
        padding: 0;
    }
    .table {
        width: 100%;
        margin-top: 20px;
        border-collapse: collapse;
        border-radius: 8px;
        overflow: hidden;
    }

        .table th,
        .table td {
            padding: 14px;
            border: 1px solid #424242; /* Darker border for the table */
            text-align: left;
        }

        .table th {
            background-color: #212121; /* Dark header background */
            color: #4A90E2; /* Softer blue text for headers */
            text-transform: uppercase;
            font-weight: 600;
        }

        .table tbody tr:hover {
            background-color: #333; /* Slightly lighter gray for row hover */
        }

        .table tbody tr td {
            color: #E0E0E0; /* Light text in table cells */
        }

    /* Form Inputs */
    .form-group {
        margin-bottom: 15px;
    }

    .form-control,
    .form-select {
        width: 100%;
        padding: 12px;
        border-radius: 8px;
        border: 1px solid #424242; /* Dark border for input fields */
        background-color: #333; /* Dark input background */
        color: #E0E0E0; /* Light text */
        font-size: 1rem;
        transition: all 0.3s ease;
    }

        .form-control:focus,
        .form-select:focus {
            outline: none;
            border-color: #4A90E2; /* Softer blue border on focus */
            box-shadow: 0 0 6px rgba(74, 144, 226, 0.5); /* Softer blue glow */
        }

    /* Buttons */
    .btn {
        padding: 12px 24px;
        border-radius: 8px;
        font-weight: bold;
        font-size: 1rem;
        color: #fff;
        background-color: #4A90E2; /* Primary button color */
        border: none;
        transition: background-color 0.3s ease, transform 0.2s ease;
    }

        .btn:hover {
            background-color: #357ABD; /* Slightly darker blue on hover */
            transform: scale(1.05);
        }

    .btn-outline-secondary {
        color: #4A90E2; /* Softer blue text */
        background-color: #333; /* Dark background */
        border: 1px solid #4A90E2;
    }

        .btn-outline-secondary:hover {
            background-color: #4A90E2;
            color: #fff;
        }

    .d-flex {
        display: flex;
    }

    .me-3 {
        margin-right: 1rem;
    }

    .ms-3 {
        margin-left: 1rem;
    }

    /* Modal Styles */
    .modal-dialog {
        max-width: 500px;
        width: 100%;
        background-color: #333; /* Dark modal background */
        border-radius: 10px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.5);
    }

    .modal-body {
        padding: 25px;
        color: #E0E0E0; /* Light modal text */
    }

    .modal-header {
        border-bottom: 1px solid #424242; /* Dark border */
        padding-bottom: 10px;
        color: #4A90E2; /* Softer blue header text */
    }

    .modal-footer {
        display: flex;
        justify-content: flex-end;
        gap: 10px;
    }

    /* Active States */
    .active-link {
        color: #4A90E2;
        font-weight: 600;
    }

    /* Links */
    a {
        color: #4A90E2; /* Softer blue links */
        text-decoration: none;
        font-weight: 500;
        transition: color 0.3s ease;
    }

        a:hover {
            color: #357ABD; /* Darker blue on hover */
        }
</style>


<div class="d-flex justify-content-between mb-3">
    <div class="d-flex">
        <div class="me-3">
            <label for="filterDebtSource">Debt Source:</label>
            <input type="text" id="filterDebtSource" class="form-control" @bind="filterDebtSource" placeholder="Search by debt source" />
        </div>
        <div class="me-3">
            <label for="filterDebtStatus">Debt Status:</label>
            <select class="form-select" @bind="filterDebtStatus">
                <option value="">Select status</option>
                <option value="Pending">Pending</option>
                <option value="Cleared">Cleared</option>
            </select>
        </div>
    </div>
    <div class="align-self-end">
        <button class="btn btn-secondary" @onclick="FilterDebts">Filter</button>
        <button class="btn btn-outline-secondary" @onclick="ClearDebtFilters">Clear</button>
        <button class="btn btn-primary ms-3" @onclick="OpenDebtModal">Add Debt</button>
    </div>
</div>

<table class="table">
    <thead>
        <tr>
            <th>Debt Source</th>
            <th>Amount</th>
            <th>Due Date</th>
            <th>Status</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var debt in filteredDebts)
        {
            <tr class="@((debt.Status == "Pending") ? "table-warning" : "")">
                <td>@debt.DebtSource</td>
                <td>@debt.Amount</td>
                <td>@debt.DueDate?.ToShortDateString()</td>
                <td>@debt.Status</td>
                <td>
                    <button class="btn btn-success" @onclick="() => MarkAsCleared(debt)">Mark as Cleared</button>
                </td>
            </tr>
        }
    </tbody>
</table>

<EditForm Model="newDebt">
    <div class="modal" style="display:@(isDebtModalOpen ? "block" : "none")">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Add Debt</h5>
                    <button type="button" class="btn-close" @onclick="CloseDebtModal"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label>Debt Source</label>
                        <input type="text" class="form-control" @bind="newDebt.DebtSource" placeholder="Enter debt source" />
                    </div>
                    <div class="mb-3">
                        <label>Amount</label>
                        <input type="number" class="form-control" @bind="newDebt.Amount" placeholder="Enter debt amount" />
                    </div>
                    <div class="mb-3">
                        <label>Due Date</label>
                        <input type="date" class="form-control" @bind="newDebt.DueDate" />
                    </div>
                    <div class="mb-3">
                        <label>Status</label>
                        <select class="form-select" @bind="newDebt.Status">
                            <option value="Pending">Pending</option>
                            <option value="Cleared">Cleared</option>
                        </select>
                    </div>

                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseDebtModal">Cancel</button>
                    <button type="button" class="btn btn-primary" @onclick="AddDebt">Save</button>
                </div>
            </div>
        </div>
    </div>
</EditForm>


@* @code { *@
@*     // Set the file path for debts *@
@*     private static readonly string FilePath = Path.Combine(@"C:\Users\ashuv\AppDevCW1\CashFlowPro\CashFlowPro\CashFlowPro\wwwroot", "debt.json"); *@

@*     private List<Debt> debts = new(); *@
@*     private List<Debt> filteredDebts = new(); *@
@*     private Debt newDebt = new(); *@
@*     private string filterDebtSource; *@
@*     private string filterDebtStatus; *@
@*     private bool isDebtModalOpen = false; *@

@*     // Load debts from the JSON file on initialization *@
@*     protected override void OnInitialized() *@
@*     { *@
@*         LoadDebts();  // Load debts from the file *@
@*         filteredDebts = debts;  // Start with all debts *@
@*     } *@

@*     // Method to load debts from the JSON file *@
@*     private void LoadDebts() *@
@*     { *@
@*         try *@
@*         { *@
@*             if (File.Exists(FilePath)) *@
@*             { *@
@*                 var json = File.ReadAllText(FilePath); *@
@*                 debts = JsonSerializer.Deserialize<List<Debt>>(json) ?? new List<Debt>(); *@
@*             } *@
@*         } *@
@*         catch (Exception ex) *@
@*         { *@
@*             Console.Error.WriteLine($"Error loading debts: {ex.Message}"); *@
@*         } *@
@*     } *@

@*     // Method to save debts back to the JSON file *@
@*     private void SaveDebts() *@
@*     { *@
@*         try *@
@*         { *@
@*             var json = JsonSerializer.Serialize(debts, new JsonSerializerOptions { WriteIndented = true }); *@
@*             File.WriteAllText(FilePath, json); *@
@*         } *@
@*         catch (Exception ex) *@
@*         { *@
@*             Console.Error.WriteLine($"Error saving debts: {ex.Message}"); *@
@*         } *@
@*     } *@

@*     // Filter debts based on criteria *@
@*     private void FilterDebts() *@
@*     { *@
@*         filteredDebts = debts.Where(d => *@
@*             (string.IsNullOrWhiteSpace(filterDebtSource) || d.DebtSource != null && d.DebtSource.Contains(filterDebtSource, StringComparison.OrdinalIgnoreCase)) && *@
@*             (string.IsNullOrWhiteSpace(filterDebtStatus) || d.Status.Equals(filterDebtStatus, StringComparison.OrdinalIgnoreCase)) *@
@*         ).ToList(); *@
@*     } *@


@*     // Clear all debt filters and show all debts *@
@*     private void ClearDebtFilters() *@
@*     { *@
@*         filterDebtSource = null; *@
@*         filterDebtStatus = null; *@
@*         filteredDebts = debts; *@

@*     } *@

@*     // Add a new debt to the list and save *@
@*     private void AddDebt() *@
@*     { *@
@*         try *@
@*         { *@
@*             // Ensure status is set to "Pending" by default if not provided *@
@*             if (string.IsNullOrEmpty(newDebt.Status)) *@
@*             { *@
@*                 newDebt.Status = "Pending"; // Default to Pending *@
@*             } *@

@*             debts.Add(newDebt); *@
@*             newDebt = new Debt(); // Reset the new debt form *@
@*             FilterDebts();  // Apply filters after adding *@
@*             CloseDebtModal();  // Close the modal after adding *@
@*             SaveDebts();  // Save the updated list to the file *@
@*         } *@
@*         catch (Exception ex) *@
@*         { *@
@*             Console.Error.WriteLine($"Error adding debt: {ex.Message}"); *@
@*         } *@
@*     } *@

@*     // Open debt modal for adding a new debt *@
@*     private void OpenDebtModal() => isDebtModalOpen = true; *@

@*     // Close debt modal *@
@*     private void CloseDebtModal() => isDebtModalOpen = false; *@

@*     // Mark a debt as cleared *@
@*     private void MarkAsCleared(Debt debt) *@
@*     { *@
@*         debt.Status = "Cleared";  // Mark the status as Cleared *@
@*         FilterDebts();  // Reapply the filter after status change *@
@*         SaveDebts();  // Save the updated list to the file *@
@*     } *@

@*     public class Debt *@
@*     { *@
@*         public string DebtSource { get; set; } *@
@*         public decimal Amount { get; set; } *@
@*         public DateTime? DueDate { get; set; } *@
@*         public string Status { get; set; } *@
@*     } *@
@* } *@

